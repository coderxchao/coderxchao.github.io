import{_ as i,c as a,a as t,o as n}from"./app-3ObzEPbj.js";const o={};function c(l,e){return n(),a("div",null,e[0]||(e[0]=[t('<p><a href="https://juejin.cn/post/6844903593275817998" target="_blank" rel="noopener noreferrer">彻底理解浏览器的缓存机制</a></p><p><img src="https://coderchao.oss-cn-shanghai.aliyuncs.com/images/1725874635448.png" alt="1725874635448.png"></p><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存"><span>强缓存</span></a></h2><p>服务端返回字段 Expires（http/1.0）和 Cache-Control（http/1.1 后），Cache-Control 优先级比 Expires 高。</p><h3 id="expires" tabindex="-1"><a class="header-anchor" href="#expires"><span>Expires</span></a></h3><blockquote><p>Expires 是 HTTP/1.0 控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于 Expires 的值时，直接使用缓存结果。（如果客户端和服务器端时间不一致，那么可能导致缓存无效）</p></blockquote><h3 id="cache-control" tabindex="-1"><a class="header-anchor" href="#cache-control"><span>Cache-Control</span></a></h3><blockquote><p>在 HTTP/1.1 中，Cache-Control 是最重要的规则，主要用于控制网页缓存，主要取值为：</p></blockquote><ul><li>Public：所有内容都将被缓存（客户端和代理服务器都可缓存）  - Private：所有内容只有客户端可以缓存，Cache-Control 的默认取值  - No-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定  - No-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存  - max-age=xxx (xxx is numeric)：缓存内容将在 xxx 秒后失效</li></ul><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h2><blockquote><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p></blockquote><ul><li>协商缓存生效：返回 304</li><li>协商缓存失效：返回 200，新的数据</li></ul><p>协商缓存控制字段</p><h3 id="last-modified-if-modified-since" tabindex="-1"><a class="header-anchor" href="#last-modified-if-modified-since"><span>Last-Modified / If-Modified-Since</span></a></h3><p>Last-Modified 是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。If-Modified-Since 则是客户端再次发起该请求时，携带上次请求返回的 Last-Modified 值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有 If-Modified-Since 字段，则会根据 If-Modified-Since 的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于 If-Modified-Since 的字段值，则重新返回资源，状态码为 200；否则则返回 304，代表资源无更新，可继续使用缓存文件。</p><h3 id="if-none-match-优先级更高" tabindex="-1"><a class="header-anchor" href="#if-none-match-优先级更高"><span>If-None-Match （优先级更高）</span></a></h3><p>Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识 (由服务器生成)，If-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200。</p>',17)]))}const s=i(o,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/vu3pwz6z/","title":"浏览器缓存机制","lang":"zh-CN","frontmatter":{"title":"浏览器缓存机制","createTime":"2024/11/07 14:39:25","permalink":"/article/vu3pwz6z/","tags":["浏览器"]},"headers":[{"level":2,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[{"level":3,"title":"Expires","slug":"expires","link":"#expires","children":[]},{"level":3,"title":"Cache-Control","slug":"cache-control","link":"#cache-control","children":[]}]},{"level":2,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[{"level":3,"title":"Last-Modified / If-Modified-Since","slug":"last-modified-if-modified-since","link":"#last-modified-if-modified-since","children":[]},{"level":3,"title":"If-None-Match （优先级更高）","slug":"if-none-match-优先级更高","link":"#if-none-match-优先级更高","children":[]}]}],"readingTime":{"minutes":2.58,"words":773},"git":{"createdTime":1730966370000,"updatedTime":1730966370000,"contributors":[{"name":"coderchao","email":"coderchao@foxmail.com","commits":1}]},"filePathRelative":"JavaScript进阶/浏览器缓存机制.md","categoryList":[{"id":"6c19ce","sort":10000,"name":"JavaScript进阶"}],"bulletin":false}');export{s as comp,d as data};
