import{_ as t,c as i,a as l,o as c}from"./app-3ObzEPbj.js";const o={};function a(g,e){return c(),i("div",null,e[0]||(e[0]=[l('<p><a href="https://www.runoob.com/note/56524" target="_blank" rel="noopener noreferrer">Git 常用命令大全</a></p><p><a href="https://juejin.cn/post/7133507623399194661" target="_blank" rel="noopener noreferrer">最全的 git 命令（详细）和对常见 git 操作流程讲解 - 掘金</a></p><blockquote><p>ps：下方命令中用&lt;&gt;包裹起来的内容为要填写的变量，remote-name 一般为 origin</p></blockquote><h2 id="git-config-全局配置" tabindex="-1"><a class="header-anchor" href="#git-config-全局配置"><span>Git config 全局配置</span></a></h2><ul><li><code>git config --global user.name &lt;username&gt;</code>：配置提交代码的用户名</li><li><code>git config --global user.email &lt;email&gt;</code>：配置提交代码的邮箱</li><li><code>git config --global core.editor &quot;code --wait&quot;</code>：将 Visual Studio Code 配置为全局默认的 Git 编辑器，使得在执行交互式 rebase 时会自动打开 Visual Studio Code</li><li><code>git config --list</code>：显示当前的配置</li></ul><h2 id="git-init-创建本地仓库" tabindex="-1"><a class="header-anchor" href="#git-init-创建本地仓库"><span>Git init 创建本地仓库</span></a></h2><ul><li><code>git init</code>：初始化本地仓库</li></ul><h2 id="git-clone-克隆远程仓库到本地" tabindex="-1"><a class="header-anchor" href="#git-clone-克隆远程仓库到本地"><span>Git clone 克隆远程仓库到本地</span></a></h2><ul><li><code>git clone &lt;repository_url&gt;</code>：克隆远程仓库默认分支到本地</li><li><code>git clone -b &lt;branch_name&gt; &lt;repository_url&gt;</code>：克隆远程仓库指定分支到本地</li></ul><h2 id="git-add-添加工作区修改到暂存区" tabindex="-1"><a class="header-anchor" href="#git-add-添加工作区修改到暂存区"><span>Git add 添加工作区修改到暂存区</span></a></h2><ul><li><code>git add &lt;file1&gt; &lt;file2&gt; …</code>：添加指定文件到暂存区</li><li><code>git add &lt;dir&gt;</code>：添加指定文件夹到暂存区，包括子文件夹</li><li><code>git add .</code>：添加当前终端所在文件夹下的所有修改到暂存区</li><li><code>git add -A</code>：添加当前工作区下所有修改到暂存区</li></ul><h2 id="git-commit-将暂存区中的文件提交到仓库" tabindex="-1"><a class="header-anchor" href="#git-commit-将暂存区中的文件提交到仓库"><span>Git commit 将暂存区中的文件提交到仓库</span></a></h2><ul><li><code>git commit &lt;file1&gt; &lt;file2&gt; … -m &lt;message&gt;</code>：提交暂存区中的指定文件到本地仓库</li><li><code>git commit -m &lt;message&gt;</code>：提交暂存区中所有文件到本地仓库：</li><li><code>git commit --amend -m &lt;message&gt;</code>：覆盖上次提交记录（提交全部修改）</li><li><code>git commit --amend &lt;file1&gt; &lt;file2&gt; … -m &lt;message&gt;</code> ：覆盖上次提交记录（提交指定文件）</li><li><code>git commit -am &lt;message&gt;</code>：相当于 <code>git add -A</code> + <code>git commit -m &lt;message&gt;</code>，但是要注意的是，如果是新增的文件，没有被 <code>git</code> 跟踪过的，则无法将新增的文件添加到暂存区</li></ul><h2 id="git-branch-分支操作" tabindex="-1"><a class="header-anchor" href="#git-branch-分支操作"><span>Git branch 分支操作</span></a></h2><ul><li><code>git branch</code>：列出所有本地分支</li><li><code>git branch -r</code>：列出所有远程分支</li><li><code>git branch -a</code>：列出所有本地分支和远程分支</li><li><code>git branch &lt;branch-name&gt;</code>：新建一个分支，但依然停留在当前分支</li><li><code>git checkout -b &lt;brnach-name&gt;</code>：新建一个分支，并切换到该分支</li><li><code>git branch &lt;branch-name&gt; &lt;commit&gt;</code>：基于指定 <code>commit</code> 新建一个分支，但依然停留在当前分支</li><li><code>git checkout -b &lt;branch-name&gt; &lt;commit&gt;</code>：基于指定 <code>commit</code> 新建一个分支，并切换到该分支</li><li><code>git checkout &lt;branch-name&gt;</code>：切换到指定分支</li><li><code>git branch -d &lt;branch-name&gt;</code>：删除本地分支</li><li><code>git branch -D &lt;branch-name&gt;</code>：强制删除本地分支，哪怕本地分支还有未合并的更改</li><li><code>git branch -dr &lt;remote-branch-name&gt;</code> | <code>git push origin --delete &lt;branch-name&gt;</code>：删除远程分支（注意这里一个是 <code>remote-branch-name</code>，一个是 <code>branch-name</code>。<code>remote-branch-name</code> 会多一个 <code>&lt;remote-name&gt;/</code>，具体取决于你远程的名字，一般为 <code>origin</code>）</li></ul><h2 id="git-tag-标签操作" tabindex="-1"><a class="header-anchor" href="#git-tag-标签操作"><span>Git tag 标签操作</span></a></h2><ul><li><code>git tag</code>：列出本地所有 tag</li><li><code>git ls-remote --tags</code>：列出远程所有 tag</li><li><code>git tag &lt;tag-name&gt;</code>：基于当前 <code>commit</code> 新建一个 tag</li><li><code>git tag &lt;tag-name&gt; &lt;commit&gt;</code>：基于指定 <code>commit</code> 新建一个 tag</li><li><code>git tag -d &lt;tag-name&gt;</code>：删除本地 tag</li><li><code>git push origin --delete &lt;tag-name&gt;</code>：删除远程 tag</li><li><code>git push origin &lt;tag-name&gt;</code>：提交指定 tag</li><li><code>git push origin --tags</code>：提交所有 tag</li></ul><h2 id="git-pull-git-push-拉取-推送远程" tabindex="-1"><a class="header-anchor" href="#git-pull-git-push-拉取-推送远程"><span>Git pull / git push 拉取/推送远程</span></a></h2><ul><li><code>git fetch origin</code>：下载远程仓库的所有变动</li><li><code>git pull &lt;remote-name&gt; &lt;branch-name&gt;</code>：拉取远程仓库代码并与本地分支合并（如果是 <code>clone</code> 下来的或者已经推送过的可以直接 <code>git pull</code>，会拉取远程默认分支合并到本地当前分支）</li><li><code>git push &lt;remote-name&gt; &lt;branch-name&gt;</code>：上传本地分支到远程仓库</li><li><code>git push -f &lt;remote-name&gt; &lt;branch-name&gt;</code>：强制推送当前分支到远程仓库分支（会覆盖远程仓库的）</li><li><code>git push &lt;remote-name&gt; --all</code>：推送所有分支到远程仓库</li><li><code>git push -u &lt;remote-name&gt;</code>：表示将本地分支与远程分支关联起来，并且将本地分支设置为远程分支的上游（upstream）。这意味着在以后的推送或拉取操作中，你可以直接使用 <code>git push</code> 或 <code>git pull</code>，而不需要指定远程分支的名称。（例如我们本地有一个 git 仓库，然后添加远程仓库管关联后第一次推送一般就需要使用该命令）</li><li><code>git remote add &lt;远程仓库名称&gt; &lt;远程仓库地址&gt; &amp;&amp; git fetch &lt;远程仓库名称&gt; &amp;&amp; git merge &lt;远程仓库名称&gt;/&lt;远程分支名称&gt;</code>：从另一个远程仓库地址拉取代码并与当前仓库的代码进行合并</li></ul><h2 id="git-fetch-强制使用远程覆盖本地" tabindex="-1"><a class="header-anchor" href="#git-fetch-强制使用远程覆盖本地"><span>Git fetch 强制使用远程覆盖本地</span></a></h2><ul><li><code>git fetch --all</code></li><li><code>git reset --hard &lt;origin-branch-name&gt;</code></li></ul><h2 id="git-push-force-强制使用本地覆盖远程" tabindex="-1"><a class="header-anchor" href="#git-push-force-强制使用本地覆盖远程"><span>Git push --force 强制使用本地覆盖远程</span></a></h2><ul><li><code>git push origin &lt;branch-name&gt; --force</code></li><li><code>git push origin &lt;branch-name&gt; --force-with-lease</code>（如果你担心在你上次 fetch 后远程分支可能已被他人更新，可以使用 <code>--force-with-lease</code> 替代 <code>--force</code>。这能在防止意外覆盖他人工作的同时实现类似的效果）</li></ul><h2 id="git-remote-查看远程仓库信息" tabindex="-1"><a class="header-anchor" href="#git-remote-查看远程仓库信息"><span>Git remote 查看远程仓库信息</span></a></h2><ul><li><code>git remote -v</code>：显示所有远程仓库</li><li><code>git remote show &lt;remote-name&gt;</code>：显示某个远程仓库的信息</li><li><code>git remote add &lt;remote-name&gt; &lt;url&gt;</code>：添加一个新的远程仓库（通常本地项目关联远程仓库第一次从远程仓库拉取代码的时候需要执行下面 2 行代码）</li><li><code>git remote set-url &lt;remote-name&gt; &lt;newUrl&gt;</code>：修改远程仓库地址</li><li><code>git branch --set-upstream-to=&lt;origin-branch-name&gt; &lt;branch-name&gt;</code>：将本地分支与指定的远程分支建立关联</li><li><code>git pull origin master --allow-unrelated-histories</code>：强制合并不相关的历史</li></ul><h2 id="git-reset-git-checkout-撤销修改" tabindex="-1"><a class="header-anchor" href="#git-reset-git-checkout-撤销修改"><span>Git reset / git checkout 撤销修改</span></a></h2><ul><li><code>git reset HEAD &lt;file&gt;</code>：将单个文件移出暂存区，保留当前工作区中的修改</li><li><code>git reset HEAD .</code>：将全部文件移出暂存区，保留当前工作区中的去修</li><li><code>git reset --hard HEAD</code>： 将全部文件移出暂存区，并将其恢复到上一次的提交状态，这个命令会将暂存区和工作目录中的所有文件都恢复到上一次提交的状态，相当于完全撤销了所有的修改。请谨慎使用这个命令，因为它会永久性地删除工作目录中的所有未提交的修改。</li><li><code>git checkout -- &lt;file&gt;</code>：将工作区中的文件恢复到上一次 <code>commit</code> 记录（对于已经在暂存区中的无效）</li><li><code>git checkout HEAD~1 -- &lt;file&gt;</code>：恢复当前文件到上一次 <code>commit</code> 记录（不管暂存区还是工作区都有效）</li></ul><h2 id="git-rebase-合并多个-commit" tabindex="-1"><a class="header-anchor" href="#git-rebase-合并多个-commit"><span>Git rebase 合并多个 commit</span></a></h2><p><code>git rebase -i HEAD~4</code>：合并最近 4 个 commit，需要注意的是这个命令在没有给 <code>git</code> 配置默认编辑器的时候会报错</p><h2 id="查看信息与历史" tabindex="-1"><a class="header-anchor" href="#查看信息与历史"><span>查看信息与历史</span></a></h2><ul><li>查看当前修改状态：<code>git status</code></li><li>查看 <code>commit</code> 提交记录：<code>git log</code></li><li>根据关键词搜索提交记录：<code>git log --grep=&quot;关键字&quot;</code></li></ul>',31)]))}const n=t(o,[["render",a],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/s6n2t80b/","title":"git 常用指令","lang":"zh-CN","frontmatter":{"title":"git 常用指令","createTime":"2024/11/07 11:03:46","permalink":"/article/s6n2t80b/","tags":["git"]},"headers":[{"level":2,"title":"Git config 全局配置","slug":"git-config-全局配置","link":"#git-config-全局配置","children":[]},{"level":2,"title":"Git init 创建本地仓库","slug":"git-init-创建本地仓库","link":"#git-init-创建本地仓库","children":[]},{"level":2,"title":"Git clone 克隆远程仓库到本地","slug":"git-clone-克隆远程仓库到本地","link":"#git-clone-克隆远程仓库到本地","children":[]},{"level":2,"title":"Git add 添加工作区修改到暂存区","slug":"git-add-添加工作区修改到暂存区","link":"#git-add-添加工作区修改到暂存区","children":[]},{"level":2,"title":"Git commit 将暂存区中的文件提交到仓库","slug":"git-commit-将暂存区中的文件提交到仓库","link":"#git-commit-将暂存区中的文件提交到仓库","children":[]},{"level":2,"title":"Git branch 分支操作","slug":"git-branch-分支操作","link":"#git-branch-分支操作","children":[]},{"level":2,"title":"Git tag 标签操作","slug":"git-tag-标签操作","link":"#git-tag-标签操作","children":[]},{"level":2,"title":"Git pull / git push 拉取/推送远程","slug":"git-pull-git-push-拉取-推送远程","link":"#git-pull-git-push-拉取-推送远程","children":[]},{"level":2,"title":"Git fetch 强制使用远程覆盖本地","slug":"git-fetch-强制使用远程覆盖本地","link":"#git-fetch-强制使用远程覆盖本地","children":[]},{"level":2,"title":"Git push --force 强制使用本地覆盖远程","slug":"git-push-force-强制使用本地覆盖远程","link":"#git-push-force-强制使用本地覆盖远程","children":[]},{"level":2,"title":"Git remote 查看远程仓库信息","slug":"git-remote-查看远程仓库信息","link":"#git-remote-查看远程仓库信息","children":[]},{"level":2,"title":"Git reset / git checkout 撤销修改","slug":"git-reset-git-checkout-撤销修改","link":"#git-reset-git-checkout-撤销修改","children":[]},{"level":2,"title":"Git rebase 合并多个 commit","slug":"git-rebase-合并多个-commit","link":"#git-rebase-合并多个-commit","children":[]},{"level":2,"title":"查看信息与历史","slug":"查看信息与历史","link":"#查看信息与历史","children":[]}],"readingTime":{"minutes":5.66,"words":1697},"git":{"createdTime":1730966370000,"updatedTime":1730966370000,"contributors":[{"name":"coderchao","email":"coderchao@foxmail.com","commits":1}]},"filePathRelative":"常用指令/git 常用指令.md","categoryList":[{"id":"390699","sort":10005,"name":"常用指令"}],"bulletin":false}');export{n as comp,r as data};
