import{_ as i,c as a,a as n,o as l}from"./app-3ObzEPbj.js";const e={};function h(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p><a href="https://zhuanlan.zhihu.com/p/225842782?utm_id=0" target="_blank" rel="noopener noreferrer">参考：知乎（就是要让你搞懂 Nginx，这篇就够了！）</a></p><blockquote><p>本文的所有操作还是在 <code>windows 11</code> 上进行的。但其实不管在什么系统上操作 <code>nginx</code> 的配置文件都是一样的，没有什么大的区别。</p></blockquote><h2 id="正向代理与反向代理" tabindex="-1"><a class="header-anchor" href="#正向代理与反向代理"><span>正向代理与反向代理</span></a></h2><blockquote><p>Nginx 是一个高性能的 HTTP 和反向代理服务器，特点是占用内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好</p></blockquote><h3 id="正向代理" tabindex="-1"><a class="header-anchor" href="#正向代理"><span>正向代理</span></a></h3><p>理解反向代理前我们需要先理解正向代理，那么什么是正向代理呢？其实我们如果使用过 VPN 就大概知道什么是正向代理了。盗用网上一张图片如下：所谓正向代理就是将我们客户端的请求通过代理服务器发送到目标服务器。例如我们需要访问 <a href="https://www.google.com" target="_blank" rel="noopener noreferrer">www.google.com</a>，在国内正常情况下我们是无法访问的，所以就需要用到 VPN，其实 VPN 就是在给我们客户端的请求进行正向代理。也就是我们发送的网络请求先通过 VPN 转发到 VPN 代理服务器上，代理服务器再将我们的请求转发到 <a href="https://www.google.com" target="_blank" rel="noopener noreferrer">www.google.com</a> 服务器上。这个过程的前提就是我们的网络能够正常访问 VPN 服务器，且 VPN 服务器能够正常访问 <a href="https://www.google.com" target="_blank" rel="noopener noreferrer">www.google.com</a> 服务器。</p><p><img src="https://coderchao.oss-cn-shanghai.aliyuncs.com/images/1712385704351.png" alt="1712385704351.png"></p><h3 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理"><span>反向代理</span></a></h3><p>反向代理对于用户来说是无法感知的（以上面例子为例，正向代理需要手动安装 VPN），用户只需要把请求发送到反向代理服务器就可以了。具体反向代理服务器实际将你的请求代理到哪台服务器用户是无法感知的。反向代理可以用来做负载均衡，如果网站访问并发量大，可能需要用到多台服务器来做负载均衡。这时候就可以通过 <code>nginx</code> 来进行配置。也就是将很多用户的请求代理转发到多台不同的服务器上，这样每台服务器需要处理的请求就少了。</p><p><img src="https://coderchao.oss-cn-shanghai.aliyuncs.com/images/1712385766944.png" alt="1712385766944.png"></p><h2 id="nginx-安装与配置" tabindex="-1"><a class="header-anchor" href="#nginx-安装与配置"><span>Nginx 安装与配置</span></a></h2><p><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener noreferrer">下载地址</a></p><p>下载完成后解压缩然后双击 <code>nginx.exe</code> 启动 <code>nginx</code> 即可，启动成功后我们访问 <code>localhost</code> 可以看到如下的一个默认页面</p><p><img src="https://coderchao.oss-cn-shanghai.aliyuncs.com/images/1712385792488.png" alt="1712385792488.png"></p><p>这个默认页面是如何加载的呢？我们需要找到我们之前解压缩 nginx 文件路径，该文件夹下有一个 <code>conf</code> 文件夹，该文件夹下有一个 <code>nginx.conf</code> 文件。内容如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定 Nginx 启动时的工作进程数量</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">worker_processes  1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">events</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 定义</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Nginx</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 事件模块的配置，其中</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> worker_connections</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 指定每个工作进程的最大连接数为</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1024</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    worker_connections  1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">http</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 引入了</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mime.types</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 文件，该文件定义了文件扩展名与</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MIME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 类型之间的映射关系</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    include       mime.types</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 指定默认的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MIME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 类型为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> application/octet-stream，即未知类型的文件默认以二进制流的方式传输</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    default_type  application/octet-stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 启用了</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sendfile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 功能，用于在磁盘文件和网络</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> socket</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 之间直接传输数据，提高文件传输效率。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sendfile        on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 指定客户端与服务器之间的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> keep-alive</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 连接超时时间为</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 65</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 秒</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    keepalive_timeout  65</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 定义了一个</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HTTP</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 服务器块，监听在</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 80</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 端口，服务器名为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> localhost</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        listen       80</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        server_name  localhost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 配置了根路径</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的访问规则，指定了根目录为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> html，并且指定了默认的索引文件为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.htm</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        location</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            root   html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            index  index.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.htm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 配置了当发生</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 500、502、503、504</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 错误时，跳转到</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /50x.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 页面</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        error_page   500</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 502</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 503</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 504  /50x.html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        #</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 配置了</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /50x.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 页面的访问规则，指定了该页面的根目录为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> html</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        location</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /50x.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            root   html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面文件我们可以知道默认情况下我们访问 localhost 走的是这里，也就是加载当前 html/index. Html 文件，解压后的 linux 文件夹下就有 <code>html</code> 文件夹，且其内部包含有 <code>index.html</code> 与 <code>50x.html</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">location</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    root   html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    index  index.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.htm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="暴露静态文件夹" tabindex="-1"><a class="header-anchor" href="#暴露静态文件夹"><span>暴露静态文件夹</span></a></h2><p>有时候我们需要将一个图片资源文件夹暴露出去让外部可以访问，只需要在 <code>nginx</code> 的配置文件 <code>nginx.conf</code> 中添加相应配置即可。修改 <code>nginx.conf</code> 配置文件保存后需要使用如下命令 <code>nginx -s reload</code> 重启一下 <code>nginx</code>，例如我 D 盘下有个 images 文件下，可以在 80 server 添加一个 location。配置如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 通过localhost/assets/访问</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">location</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /assets/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    alias   D:/images/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    access_log</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> logs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    autoindex</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 通过localhost/images/访问</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">location</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /images/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    root   D:/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    access_log</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> logs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    autoindex</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时我们可以通过 localhost/assets/看到所有图片文件，如下：</p><p><img src="https://coderchao.oss-cn-shanghai.aliyuncs.com/images/1712385835276.png" alt="1712385835276.png"></p><h2 id="反向代理-将请求代理到其他服务器" tabindex="-1"><a class="header-anchor" href="#反向代理-将请求代理到其他服务器"><span>反向代理（将请求代理到其他服务器）</span></a></h2><p>在 <code>nginx.conf</code> 下新增一个 <code>server</code>，配置如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    listen</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 81</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    server_name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> localhost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    location</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        proxy_pass</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://localhost:3000/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        proxy_set_header</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HOST</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        proxy_set_header</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> X-Real-IP</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $remote_addr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        proxy_set_header</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> X-Forwarded-For</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $proxy_add_x_forwarded_for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们访问 localhost: 81 的时候会自动代理到 localhost: 3000 上，这里我 localhost: 3000 启动了一个前端程序。效果如下：可以看到地址栏中的 url 是 81 端口，但是实际走的确实我本地启动的 3000 端口程序服务。</p><p><img src="https://coderchao.oss-cn-shanghai.aliyuncs.com/images/1712385859368.png" alt="1712385859368.png"></p><blockquote><p>使用此功能可以将我们前端程序和接口部署到同一个端口上，在同一个 server 下增加一个 location 即可。Location /用来访问网页，location /api 用来访问接口。</p></blockquote><h2 id="负载均衡-将请求代理到多台服务器" tabindex="-1"><a class="header-anchor" href="#负载均衡-将请求代理到多台服务器"><span>负载均衡（将请求代理到多台服务器）</span></a></h2><p>负载均衡其实和反向代理一样，只是需要创建一个服务器群，然后将反向代理的地址指向这个服务器群即可。配置如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">http</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    upstream</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> backend</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> localhost:3000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> localhost:3001</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        listen</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 82</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        server_name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> localhost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        location</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            proxy_pass</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://backend</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            proxy_set_header</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Host</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            proxy_set_header</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> X-Real-IP</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $remote_addr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            proxy_set_header</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> X-Forwarded-For</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $proxy_add_x_forwarded_for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样配置后，我们打开 2 个浏览器窗口，访问 localhost: 82，会发现一个代理到了 localhost: 3000，一个代理到了 localhost:3001</p>`,35)]))}const k=i(e,[["render",h],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/yiy2salj/","title":"Nginx 基本使用","lang":"zh-CN","frontmatter":{"title":"Nginx 基本使用","createTime":"2024/11/07 14:35:04","permalink":"/article/yiy2salj/","tags":["nginx"]},"headers":[{"level":2,"title":"正向代理与反向代理","slug":"正向代理与反向代理","link":"#正向代理与反向代理","children":[{"level":3,"title":"正向代理","slug":"正向代理","link":"#正向代理","children":[]},{"level":3,"title":"反向代理","slug":"反向代理","link":"#反向代理","children":[]}]},{"level":2,"title":"Nginx 安装与配置","slug":"nginx-安装与配置","link":"#nginx-安装与配置","children":[]},{"level":2,"title":"暴露静态文件夹","slug":"暴露静态文件夹","link":"#暴露静态文件夹","children":[]},{"level":2,"title":"反向代理（将请求代理到其他服务器）","slug":"反向代理-将请求代理到其他服务器","link":"#反向代理-将请求代理到其他服务器","children":[]},{"level":2,"title":"负载均衡（将请求代理到多台服务器）","slug":"负载均衡-将请求代理到多台服务器","link":"#负载均衡-将请求代理到多台服务器","children":[]}],"readingTime":{"minutes":5.18,"words":1554},"git":{"createdTime":1730966370000,"updatedTime":1730966370000,"contributors":[{"name":"coderchao","email":"coderchao@foxmail.com","commits":1}]},"filePathRelative":"工程化/Nginx 基本使用.md","categoryList":[{"id":"d994a6","sort":10004,"name":"工程化"}],"bulletin":false}');export{k as comp,d as data};
